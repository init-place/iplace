// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: iplace/board/v1/query.proto

package boardv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Query_GetAllBoards_FullMethodName = "/iplace.board.v1.Query/GetAllBoards"
	Query_GetBoard_FullMethodName     = "/iplace.board.v1.Query/GetBoard"
	Query_GetPixelInfo_FullMethodName = "/iplace.board.v1.Query/GetPixelInfo"
	Query_GetPixels_FullMethodName    = "/iplace.board.v1.Query/GetPixels"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	GetAllBoards(ctx context.Context, in *QueryGetAllBoardsRequest, opts ...grpc.CallOption) (*QueryGetAllBoardsResponse, error)
	GetBoard(ctx context.Context, in *QueryGetBoardRequest, opts ...grpc.CallOption) (*QueryGetBoardResponse, error)
	//	rpc GetAllSlices(QueryGetAllSlicesRequest) returns (QueryGetAllSlicesResponse) {
	//	  option (google.api.http).get = "/iplace/board/{board_id}/slice";
	//	}
	//
	//	rpc GetSlice(QueryGetSliceRequest) returns (QueryGetSliceResponse) {
	//	  option (google.api.http).get = "/iplace/board/{board_id}/slice/{slice_id}";
	//	}
	GetPixelInfo(ctx context.Context, in *QueryGetPixelInfoRequest, opts ...grpc.CallOption) (*QueryGetPixelInfoResponse, error)
	GetPixels(ctx context.Context, in *QueryGetPixelsRequest, opts ...grpc.CallOption) (*QueryGetPixelsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetAllBoards(ctx context.Context, in *QueryGetAllBoardsRequest, opts ...grpc.CallOption) (*QueryGetAllBoardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetAllBoardsResponse)
	err := c.cc.Invoke(ctx, Query_GetAllBoards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBoard(ctx context.Context, in *QueryGetBoardRequest, opts ...grpc.CallOption) (*QueryGetBoardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetBoardResponse)
	err := c.cc.Invoke(ctx, Query_GetBoard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPixelInfo(ctx context.Context, in *QueryGetPixelInfoRequest, opts ...grpc.CallOption) (*QueryGetPixelInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetPixelInfoResponse)
	err := c.cc.Invoke(ctx, Query_GetPixelInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPixels(ctx context.Context, in *QueryGetPixelsRequest, opts ...grpc.CallOption) (*QueryGetPixelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGetPixelsResponse)
	err := c.cc.Invoke(ctx, Query_GetPixels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	GetAllBoards(context.Context, *QueryGetAllBoardsRequest) (*QueryGetAllBoardsResponse, error)
	GetBoard(context.Context, *QueryGetBoardRequest) (*QueryGetBoardResponse, error)
	//	rpc GetAllSlices(QueryGetAllSlicesRequest) returns (QueryGetAllSlicesResponse) {
	//	  option (google.api.http).get = "/iplace/board/{board_id}/slice";
	//	}
	//
	//	rpc GetSlice(QueryGetSliceRequest) returns (QueryGetSliceResponse) {
	//	  option (google.api.http).get = "/iplace/board/{board_id}/slice/{slice_id}";
	//	}
	GetPixelInfo(context.Context, *QueryGetPixelInfoRequest) (*QueryGetPixelInfoResponse, error)
	GetPixels(context.Context, *QueryGetPixelsRequest) (*QueryGetPixelsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) GetAllBoards(context.Context, *QueryGetAllBoardsRequest) (*QueryGetAllBoardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBoards not implemented")
}
func (UnimplementedQueryServer) GetBoard(context.Context, *QueryGetBoardRequest) (*QueryGetBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoard not implemented")
}
func (UnimplementedQueryServer) GetPixelInfo(context.Context, *QueryGetPixelInfoRequest) (*QueryGetPixelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPixelInfo not implemented")
}
func (UnimplementedQueryServer) GetPixels(context.Context, *QueryGetPixelsRequest) (*QueryGetPixelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPixels not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_GetAllBoards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllBoardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllBoards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAllBoards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllBoards(ctx, req.(*QueryGetAllBoardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBoard(ctx, req.(*QueryGetBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPixelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPixelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPixelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetPixelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPixelInfo(ctx, req.(*QueryGetPixelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPixels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPixelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPixels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetPixels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPixels(ctx, req.(*QueryGetPixelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iplace.board.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllBoards",
			Handler:    _Query_GetAllBoards_Handler,
		},
		{
			MethodName: "GetBoard",
			Handler:    _Query_GetBoard_Handler,
		},
		{
			MethodName: "GetPixelInfo",
			Handler:    _Query_GetPixelInfo_Handler,
		},
		{
			MethodName: "GetPixels",
			Handler:    _Query_GetPixels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iplace/board/v1/query.proto",
}

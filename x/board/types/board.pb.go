// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iplace/board/v1/board.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Board struct {
	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SizeX uint32 `protobuf:"varint,3,opt,name=size_x,json=sizeX,proto3" json:"size_x,omitempty"`
	SizeY uint32 `protobuf:"varint,4,opt,name=size_y,json=sizeY,proto3" json:"size_y,omitempty"`
	//  uint32 reference_x = 5;
	//  uint32 reference_y = 6;
	Creator string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
	Admin   string `protobuf:"bytes,8,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (m *Board) Reset()         { *m = Board{} }
func (m *Board) String() string { return proto.CompactTextString(m) }
func (*Board) ProtoMessage()    {}
func (*Board) Descriptor() ([]byte, []int) {
	return fileDescriptor_43995d29b9fd26d7, []int{0}
}
func (m *Board) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Board) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Board.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Board) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Board.Merge(m, src)
}
func (m *Board) XXX_Size() int {
	return m.Size()
}
func (m *Board) XXX_DiscardUnknown() {
	xxx_messageInfo_Board.DiscardUnknown(m)
}

var xxx_messageInfo_Board proto.InternalMessageInfo

func (m *Board) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Board) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Board) GetSizeX() uint32 {
	if m != nil {
		return m.SizeX
	}
	return 0
}

func (m *Board) GetSizeY() uint32 {
	if m != nil {
		return m.SizeY
	}
	return 0
}

func (m *Board) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Board) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

type PixelInfo struct {
	BoardId uint32 `protobuf:"varint,1,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	// uint32 slice_id = 2;
	PixelIndex uint32 `protobuf:"varint,3,opt,name=pixel_index,json=pixelIndex,proto3" json:"pixel_index,omitempty"`
	Color      uint32 `protobuf:"varint,4,opt,name=color,proto3" json:"color,omitempty"`
	Setter     string `protobuf:"bytes,5,opt,name=setter,proto3" json:"setter,omitempty"`
}

func (m *PixelInfo) Reset()         { *m = PixelInfo{} }
func (m *PixelInfo) String() string { return proto.CompactTextString(m) }
func (*PixelInfo) ProtoMessage()    {}
func (*PixelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_43995d29b9fd26d7, []int{1}
}
func (m *PixelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PixelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PixelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PixelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PixelInfo.Merge(m, src)
}
func (m *PixelInfo) XXX_Size() int {
	return m.Size()
}
func (m *PixelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PixelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PixelInfo proto.InternalMessageInfo

func (m *PixelInfo) GetBoardId() uint32 {
	if m != nil {
		return m.BoardId
	}
	return 0
}

func (m *PixelInfo) GetPixelIndex() uint32 {
	if m != nil {
		return m.PixelIndex
	}
	return 0
}

func (m *PixelInfo) GetColor() uint32 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *PixelInfo) GetSetter() string {
	if m != nil {
		return m.Setter
	}
	return ""
}

func init() {
	proto.RegisterType((*Board)(nil), "iplace.board.v1.Board")
	proto.RegisterType((*PixelInfo)(nil), "iplace.board.v1.PixelInfo")
}

func init() { proto.RegisterFile("iplace/board/v1/board.proto", fileDescriptor_43995d29b9fd26d7) }

var fileDescriptor_43995d29b9fd26d7 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0xeb, 0xd2, 0xf4, 0xcf, 0x21, 0x40, 0xb2, 0x8a, 0xe4, 0x82, 0x14, 0xaa, 0x4e, 0x15,
	0x52, 0x13, 0x0a, 0x4f, 0x40, 0xc5, 0xd2, 0x0d, 0x95, 0x05, 0x58, 0xa2, 0x34, 0x36, 0xc5, 0x52,
	0x13, 0x47, 0xb6, 0xa9, 0x52, 0x5e, 0x02, 0x1e, 0x86, 0x95, 0x9d, 0xb1, 0x62, 0x62, 0x44, 0xed,
	0x8b, 0xa0, 0xd8, 0x49, 0x19, 0xbb, 0xdd, 0x77, 0xf7, 0x3b, 0xfb, 0x3e, 0x7d, 0x70, 0xca, 0xd3,
	0x79, 0x18, 0x31, 0x7f, 0x2a, 0x42, 0x49, 0xfd, 0xc5, 0xd0, 0x16, 0x5e, 0x2a, 0x85, 0x16, 0xf8,
	0xc8, 0x0e, 0x3d, 0xdb, 0x5b, 0x0c, 0x4f, 0x3a, 0x91, 0x50, 0xb1, 0x50, 0x81, 0x19, 0xfb, 0x56,
	0x58, 0xb6, 0xf7, 0x89, 0xc0, 0x19, 0xe5, 0x1c, 0x3e, 0x84, 0x2a, 0xa7, 0x04, 0x75, 0x51, 0xff,
	0x60, 0x52, 0xe5, 0x14, 0x63, 0xa8, 0x25, 0x61, 0xcc, 0x48, 0xb5, 0x8b, 0xfa, 0xad, 0x89, 0xa9,
	0xf1, 0x31, 0xd4, 0x15, 0x7f, 0x65, 0x41, 0x46, 0xf6, 0x0c, 0xe7, 0xe4, 0xea, 0x7e, 0xdb, 0x5e,
	0x92, 0xda, 0x7f, 0xfb, 0x01, 0x5f, 0x42, 0x23, 0x92, 0x2c, 0xd4, 0x42, 0x92, 0x46, 0xfe, 0xc8,
	0x88, 0x7c, 0x7f, 0x0c, 0xda, 0xc5, 0xf7, 0xd7, 0x94, 0x4a, 0xa6, 0xd4, 0x9d, 0x96, 0x3c, 0x99,
	0x4d, 0x4a, 0x10, 0x7b, 0xe0, 0x84, 0x34, 0xe6, 0x09, 0x69, 0xee, 0xd8, 0xb0, 0x58, 0xef, 0x0d,
	0x41, 0xeb, 0x96, 0x67, 0x6c, 0x3e, 0x4e, 0x9e, 0x04, 0xee, 0x40, 0xd3, 0x98, 0x0e, 0xb6, 0x4e,
	0x1a, 0x46, 0x8f, 0x29, 0x3e, 0x83, 0xfd, 0x34, 0xe7, 0x02, 0x9e, 0x50, 0x56, 0xde, 0x0f, 0xa9,
	0x5d, 0xa5, 0x2c, 0xc3, 0x6d, 0x70, 0x22, 0x31, 0x17, 0xb2, 0xf4, 0x60, 0x04, 0xbe, 0x80, 0xba,
	0x62, 0x5a, 0x33, 0x49, 0x9c, 0x1d, 0x07, 0x15, 0xdc, 0xe8, 0xe6, 0x6b, 0xed, 0xa2, 0xd5, 0xda,
	0x45, 0xbf, 0x6b, 0x17, 0xbd, 0x6f, 0xdc, 0xca, 0x6a, 0xe3, 0x56, 0x7e, 0x36, 0x6e, 0xe5, 0xf1,
	0x7c, 0xc6, 0xf5, 0xf3, 0xcb, 0xd4, 0x8b, 0x44, 0xec, 0xf3, 0x84, 0xeb, 0x81, 0xcd, 0xb0, 0x88,
	0x32, 0x2b, 0xc2, 0xd4, 0xcb, 0x94, 0xa9, 0x69, 0xdd, 0xc4, 0x73, 0xf5, 0x17, 0x00, 0x00, 0xff,
	0xff, 0xd9, 0x79, 0x25, 0x93, 0xe9, 0x01, 0x00, 0x00,
}

func (m *Board) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Board) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Board) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintBoard(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintBoard(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SizeY != 0 {
		i = encodeVarintBoard(dAtA, i, uint64(m.SizeY))
		i--
		dAtA[i] = 0x20
	}
	if m.SizeX != 0 {
		i = encodeVarintBoard(dAtA, i, uint64(m.SizeX))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBoard(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBoard(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PixelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PixelInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PixelInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Setter) > 0 {
		i -= len(m.Setter)
		copy(dAtA[i:], m.Setter)
		i = encodeVarintBoard(dAtA, i, uint64(len(m.Setter)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Color != 0 {
		i = encodeVarintBoard(dAtA, i, uint64(m.Color))
		i--
		dAtA[i] = 0x20
	}
	if m.PixelIndex != 0 {
		i = encodeVarintBoard(dAtA, i, uint64(m.PixelIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.BoardId != 0 {
		i = encodeVarintBoard(dAtA, i, uint64(m.BoardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBoard(dAtA []byte, offset int, v uint64) int {
	offset -= sovBoard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Board) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBoard(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBoard(uint64(l))
	}
	if m.SizeX != 0 {
		n += 1 + sovBoard(uint64(m.SizeX))
	}
	if m.SizeY != 0 {
		n += 1 + sovBoard(uint64(m.SizeY))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovBoard(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovBoard(uint64(l))
	}
	return n
}

func (m *PixelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoardId != 0 {
		n += 1 + sovBoard(uint64(m.BoardId))
	}
	if m.PixelIndex != 0 {
		n += 1 + sovBoard(uint64(m.PixelIndex))
	}
	if m.Color != 0 {
		n += 1 + sovBoard(uint64(m.Color))
	}
	l = len(m.Setter)
	if l > 0 {
		n += 1 + l + sovBoard(uint64(l))
	}
	return n
}

func sovBoard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBoard(x uint64) (n int) {
	return sovBoard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Board) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBoard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Board: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Board: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBoard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBoard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeX", wireType)
			}
			m.SizeX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeX |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeY", wireType)
			}
			m.SizeY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeY |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBoard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBoard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBoard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBoard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBoard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBoard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PixelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBoard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PixelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PixelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoardId", wireType)
			}
			m.BoardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PixelIndex", wireType)
			}
			m.PixelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PixelIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBoard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBoard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Setter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBoard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBoard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBoard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBoard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBoard
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBoard
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBoard
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBoard        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBoard          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBoard = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iplace/board/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetAllBoardsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllBoardsRequest) Reset()         { *m = QueryGetAllBoardsRequest{} }
func (m *QueryGetAllBoardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllBoardsRequest) ProtoMessage()    {}
func (*QueryGetAllBoardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_147e740f497986d7, []int{0}
}
func (m *QueryGetAllBoardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllBoardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllBoardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllBoardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllBoardsRequest.Merge(m, src)
}
func (m *QueryGetAllBoardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllBoardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllBoardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllBoardsRequest proto.InternalMessageInfo

func (m *QueryGetAllBoardsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllBoardsResponse struct {
	Boards     []Board             `protobuf:"bytes,1,rep,name=boards,proto3" json:"boards"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllBoardsResponse) Reset()         { *m = QueryGetAllBoardsResponse{} }
func (m *QueryGetAllBoardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllBoardsResponse) ProtoMessage()    {}
func (*QueryGetAllBoardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_147e740f497986d7, []int{1}
}
func (m *QueryGetAllBoardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllBoardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllBoardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllBoardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllBoardsResponse.Merge(m, src)
}
func (m *QueryGetAllBoardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllBoardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllBoardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllBoardsResponse proto.InternalMessageInfo

func (m *QueryGetAllBoardsResponse) GetBoards() []Board {
	if m != nil {
		return m.Boards
	}
	return nil
}

func (m *QueryGetAllBoardsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBoardRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetBoardRequest) Reset()         { *m = QueryGetBoardRequest{} }
func (m *QueryGetBoardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBoardRequest) ProtoMessage()    {}
func (*QueryGetBoardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_147e740f497986d7, []int{2}
}
func (m *QueryGetBoardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBoardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBoardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBoardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBoardRequest.Merge(m, src)
}
func (m *QueryGetBoardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBoardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBoardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBoardRequest proto.InternalMessageInfo

func (m *QueryGetBoardRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetBoardResponse struct {
	Board *Board `protobuf:"bytes,1,opt,name=board,proto3" json:"board,omitempty"`
}

func (m *QueryGetBoardResponse) Reset()         { *m = QueryGetBoardResponse{} }
func (m *QueryGetBoardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBoardResponse) ProtoMessage()    {}
func (*QueryGetBoardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_147e740f497986d7, []int{3}
}
func (m *QueryGetBoardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBoardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBoardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBoardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBoardResponse.Merge(m, src)
}
func (m *QueryGetBoardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBoardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBoardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBoardResponse proto.InternalMessageInfo

func (m *QueryGetBoardResponse) GetBoard() *Board {
	if m != nil {
		return m.Board
	}
	return nil
}

type QueryGetPixelInfoRequest struct {
	BoardId uint32 `protobuf:"varint,1,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	//  uint32 slice_id = 2;
	PixelIndex uint32 `protobuf:"varint,3,opt,name=pixel_index,json=pixelIndex,proto3" json:"pixel_index,omitempty"`
}

func (m *QueryGetPixelInfoRequest) Reset()         { *m = QueryGetPixelInfoRequest{} }
func (m *QueryGetPixelInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPixelInfoRequest) ProtoMessage()    {}
func (*QueryGetPixelInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_147e740f497986d7, []int{4}
}
func (m *QueryGetPixelInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPixelInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPixelInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPixelInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPixelInfoRequest.Merge(m, src)
}
func (m *QueryGetPixelInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPixelInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPixelInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPixelInfoRequest proto.InternalMessageInfo

func (m *QueryGetPixelInfoRequest) GetBoardId() uint32 {
	if m != nil {
		return m.BoardId
	}
	return 0
}

func (m *QueryGetPixelInfoRequest) GetPixelIndex() uint32 {
	if m != nil {
		return m.PixelIndex
	}
	return 0
}

type QueryGetPixelInfoResponse struct {
	Pixel *PixelInfo `protobuf:"bytes,1,opt,name=pixel,proto3" json:"pixel,omitempty"`
}

func (m *QueryGetPixelInfoResponse) Reset()         { *m = QueryGetPixelInfoResponse{} }
func (m *QueryGetPixelInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPixelInfoResponse) ProtoMessage()    {}
func (*QueryGetPixelInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_147e740f497986d7, []int{5}
}
func (m *QueryGetPixelInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPixelInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPixelInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPixelInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPixelInfoResponse.Merge(m, src)
}
func (m *QueryGetPixelInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPixelInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPixelInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPixelInfoResponse proto.InternalMessageInfo

func (m *QueryGetPixelInfoResponse) GetPixel() *PixelInfo {
	if m != nil {
		return m.Pixel
	}
	return nil
}

type QueryGetPixelsRequest struct {
	BoardId uint32 `protobuf:"varint,1,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	// uint32 slice_id = 2;
	Start uint32 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End   uint32 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *QueryGetPixelsRequest) Reset()         { *m = QueryGetPixelsRequest{} }
func (m *QueryGetPixelsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPixelsRequest) ProtoMessage()    {}
func (*QueryGetPixelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_147e740f497986d7, []int{6}
}
func (m *QueryGetPixelsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPixelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPixelsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPixelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPixelsRequest.Merge(m, src)
}
func (m *QueryGetPixelsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPixelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPixelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPixelsRequest proto.InternalMessageInfo

func (m *QueryGetPixelsRequest) GetBoardId() uint32 {
	if m != nil {
		return m.BoardId
	}
	return 0
}

func (m *QueryGetPixelsRequest) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *QueryGetPixelsRequest) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

type QueryGetPixelsResponse struct {
	Pixels []byte `protobuf:"bytes,1,opt,name=pixels,proto3" json:"pixels,omitempty"`
}

func (m *QueryGetPixelsResponse) Reset()         { *m = QueryGetPixelsResponse{} }
func (m *QueryGetPixelsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPixelsResponse) ProtoMessage()    {}
func (*QueryGetPixelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_147e740f497986d7, []int{7}
}
func (m *QueryGetPixelsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPixelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPixelsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPixelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPixelsResponse.Merge(m, src)
}
func (m *QueryGetPixelsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPixelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPixelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPixelsResponse proto.InternalMessageInfo

func (m *QueryGetPixelsResponse) GetPixels() []byte {
	if m != nil {
		return m.Pixels
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetAllBoardsRequest)(nil), "iplace.board.v1.QueryGetAllBoardsRequest")
	proto.RegisterType((*QueryGetAllBoardsResponse)(nil), "iplace.board.v1.QueryGetAllBoardsResponse")
	proto.RegisterType((*QueryGetBoardRequest)(nil), "iplace.board.v1.QueryGetBoardRequest")
	proto.RegisterType((*QueryGetBoardResponse)(nil), "iplace.board.v1.QueryGetBoardResponse")
	proto.RegisterType((*QueryGetPixelInfoRequest)(nil), "iplace.board.v1.QueryGetPixelInfoRequest")
	proto.RegisterType((*QueryGetPixelInfoResponse)(nil), "iplace.board.v1.QueryGetPixelInfoResponse")
	proto.RegisterType((*QueryGetPixelsRequest)(nil), "iplace.board.v1.QueryGetPixelsRequest")
	proto.RegisterType((*QueryGetPixelsResponse)(nil), "iplace.board.v1.QueryGetPixelsResponse")
}

func init() { proto.RegisterFile("iplace/board/v1/query.proto", fileDescriptor_147e740f497986d7) }

var fileDescriptor_147e740f497986d7 = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0xe3, 0xb4, 0xe9, 0xd7, 0x6f, 0xdb, 0x52, 0x58, 0xa5, 0x25, 0x35, 0xc8, 0xad, 0x2c,
	0x91, 0x96, 0x08, 0xbc, 0x4d, 0xca, 0x85, 0x23, 0x11, 0x50, 0xf5, 0x80, 0x54, 0x7c, 0xe0, 0xd0,
	0x4b, 0x64, 0xc7, 0x5b, 0xb3, 0x52, 0xe2, 0x75, 0xb3, 0x4e, 0x94, 0xaa, 0xe4, 0x82, 0x78, 0x00,
	0x24, 0x6e, 0x9c, 0x38, 0xf1, 0x2c, 0x3d, 0x56, 0xe2, 0xc2, 0x09, 0xa1, 0x84, 0x07, 0x41, 0x9e,
	0x5d, 0x27, 0x4e, 0x42, 0x92, 0x5e, 0x2a, 0xef, 0xce, 0x7f, 0xfe, 0xf3, 0x9b, 0x9d, 0x69, 0xd0,
	0x03, 0x16, 0x36, 0x9c, 0x3a, 0x25, 0x2e, 0x77, 0x5a, 0x1e, 0xe9, 0x94, 0xc9, 0x45, 0x9b, 0xb6,
	0x2e, 0xad, 0xb0, 0xc5, 0x23, 0x8e, 0x37, 0x65, 0xd0, 0x82, 0xa0, 0xd5, 0x29, 0xeb, 0xf7, 0x9c,
	0x26, 0x0b, 0x38, 0x81, 0xbf, 0x52, 0xa3, 0xdf, 0xaf, 0x73, 0xd1, 0xe4, 0x82, 0x34, 0x85, 0x1f,
	0xa7, 0x37, 0x85, 0xaf, 0x02, 0x3b, 0x32, 0x50, 0x83, 0x13, 0x91, 0x07, 0x15, 0xca, 0xfb, 0xdc,
	0xe7, 0xf2, 0x3e, 0xfe, 0x52, 0xb7, 0x0f, 0x7d, 0xce, 0xfd, 0x06, 0x25, 0x4e, 0xc8, 0x88, 0x13,
	0x04, 0x3c, 0x72, 0x22, 0xc6, 0x83, 0x24, 0x67, 0x0a, 0x54, 0x42, 0xc9, 0x60, 0x49, 0x41, 0xb8,
	0x8e, 0xa0, 0xb2, 0x03, 0xd2, 0x29, 0xbb, 0x34, 0x72, 0xca, 0x24, 0x74, 0x7c, 0x16, 0x80, 0x93,
	0xd4, 0x9a, 0x2e, 0x2a, 0xbc, 0x8d, 0x15, 0xc7, 0x34, 0x7a, 0xd1, 0x68, 0x54, 0x63, 0x17, 0x61,
	0xd3, 0x8b, 0x36, 0x15, 0x11, 0x7e, 0x8d, 0xd0, 0x48, 0x5f, 0xd0, 0xf6, 0xb4, 0x83, 0xb5, 0x4a,
	0xd1, 0x52, 0xec, 0xb1, 0xb9, 0x25, 0x9f, 0x47, 0x99, 0x5b, 0xa7, 0x8e, 0x4f, 0x55, 0xae, 0x9d,
	0xca, 0x34, 0xbf, 0x6a, 0x68, 0xe7, 0x1f, 0x45, 0x44, 0xc8, 0x03, 0x41, 0xf1, 0x33, 0xb4, 0x02,
	0xf0, 0xa2, 0xa0, 0xed, 0x2d, 0x1d, 0xac, 0x55, 0xb6, 0xad, 0x89, 0x77, 0xb6, 0x20, 0xa1, 0xba,
	0x7c, 0xfd, 0x6b, 0x37, 0x63, 0x2b, 0x2d, 0x3e, 0x1e, 0x63, 0xcb, 0x02, 0xdb, 0xfe, 0x42, 0x36,
	0x59, 0x72, 0x0c, 0xae, 0x88, 0xf2, 0x09, 0x1b, 0xd4, 0x49, 0x9a, 0xbf, 0x83, 0xb2, 0xcc, 0x83,
	0xa6, 0x37, 0xec, 0x2c, 0xf3, 0xcc, 0x57, 0x68, 0x6b, 0x42, 0xa7, 0xf8, 0x9f, 0xa0, 0x1c, 0x30,
	0xa9, 0x07, 0x9a, 0x81, 0x6f, 0x4b, 0x91, 0xf9, 0x6e, 0xf4, 0xde, 0xa7, 0xac, 0x4b, 0x1b, 0x27,
	0xc1, 0x39, 0x4f, 0x4a, 0xee, 0xa0, 0x55, 0x10, 0xd5, 0x86, 0x85, 0xff, 0x83, 0xf3, 0x89, 0x87,
	0x77, 0xd1, 0x5a, 0x18, 0xcb, 0x6b, 0x2c, 0xf0, 0x68, 0xb7, 0xb0, 0x04, 0x51, 0x14, 0x4a, 0x07,
	0x8f, 0x76, 0xcd, 0x37, 0xa3, 0x27, 0x4e, 0xf9, 0x2a, 0xc4, 0x43, 0x94, 0x03, 0xa9, 0x42, 0xd4,
	0xa7, 0x10, 0x47, 0x29, 0x52, 0x68, 0x9e, 0x8d, 0xba, 0x85, 0x98, 0xb8, 0x05, 0x63, 0x1e, 0xe5,
	0x44, 0xe4, 0xb4, 0x22, 0x45, 0x27, 0x0f, 0xf8, 0x2e, 0x5a, 0xa2, 0x81, 0x57, 0x58, 0x86, 0xbb,
	0xf8, 0xd3, 0x3c, 0x44, 0xdb, 0x93, 0xde, 0x8a, 0x73, 0x1b, 0xad, 0x40, 0x79, 0x01, 0xd6, 0xeb,
	0xb6, 0x3a, 0x55, 0xbe, 0x2f, 0xa3, 0x1c, 0xa4, 0xe0, 0x0f, 0x68, 0x3d, 0xbd, 0x44, 0xf8, 0xf1,
	0x54, 0x2b, 0xb3, 0xb6, 0x59, 0x2f, 0xdd, 0x46, 0x2a, 0x41, 0xcc, 0xad, 0x8f, 0x3f, 0xfe, 0x7c,
	0xc9, 0x6e, 0xe2, 0x0d, 0x92, 0xfe, 0x3f, 0xc3, 0x6d, 0xb4, 0x9a, 0x8c, 0x1f, 0x3f, 0x9a, 0x69,
	0x97, 0x5e, 0x23, 0xbd, 0xb8, 0x48, 0xa6, 0x2a, 0xea, 0x50, 0x31, 0x8f, 0xf1, 0x58, 0x45, 0x72,
	0xc5, 0xbc, 0x1e, 0xfe, 0xa6, 0x41, 0xd7, 0xc3, 0x21, 0xcd, 0xe9, 0x7a, 0x72, 0xa7, 0xe6, 0x74,
	0x3d, 0xb5, 0x26, 0xe6, 0x73, 0x60, 0x38, 0xc2, 0xe5, 0x09, 0x86, 0x64, 0xe0, 0x3d, 0x92, 0xec,
	0xe0, 0x39, 0x27, 0x57, 0xa9, 0x7d, 0xec, 0xe1, 0x4f, 0x1a, 0xfa, 0x7f, 0x38, 0x4f, 0x5c, 0x9c,
	0x5f, 0x74, 0x38, 0x92, 0xfd, 0x85, 0x3a, 0x45, 0x56, 0x04, 0xb2, 0x3d, 0x6c, 0xcc, 0x27, 0xab,
	0xbe, 0xbc, 0xee, 0x1b, 0xda, 0x4d, 0xdf, 0xd0, 0x7e, 0xf7, 0x0d, 0xed, 0xf3, 0xc0, 0xc8, 0xdc,
	0x0c, 0x8c, 0xcc, 0xcf, 0x81, 0x91, 0x39, 0x2b, 0xf9, 0x2c, 0x7a, 0xdf, 0x76, 0xad, 0x3a, 0x6f,
	0x12, 0x16, 0xb0, 0xe8, 0xa9, 0xf4, 0x51, 0x76, 0x5d, 0x65, 0x18, 0x5d, 0x86, 0x54, 0xb8, 0x2b,
	0xf0, 0xd3, 0x78, 0xf4, 0x37, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x21, 0x4c, 0x25, 0x0e, 0x06, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	GetAllBoards(ctx context.Context, in *QueryGetAllBoardsRequest, opts ...grpc.CallOption) (*QueryGetAllBoardsResponse, error)
	GetBoard(ctx context.Context, in *QueryGetBoardRequest, opts ...grpc.CallOption) (*QueryGetBoardResponse, error)
	//	rpc GetAllSlices(QueryGetAllSlicesRequest) returns (QueryGetAllSlicesResponse) {
	//	  option (google.api.http).get = "/iplace/board/{board_id}/slice";
	//	}
	//
	//	rpc GetSlice(QueryGetSliceRequest) returns (QueryGetSliceResponse) {
	//	  option (google.api.http).get = "/iplace/board/{board_id}/slice/{slice_id}";
	//	}
	GetPixelInfo(ctx context.Context, in *QueryGetPixelInfoRequest, opts ...grpc.CallOption) (*QueryGetPixelInfoResponse, error)
	GetPixels(ctx context.Context, in *QueryGetPixelsRequest, opts ...grpc.CallOption) (*QueryGetPixelsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetAllBoards(ctx context.Context, in *QueryGetAllBoardsRequest, opts ...grpc.CallOption) (*QueryGetAllBoardsResponse, error) {
	out := new(QueryGetAllBoardsResponse)
	err := c.cc.Invoke(ctx, "/iplace.board.v1.Query/GetAllBoards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBoard(ctx context.Context, in *QueryGetBoardRequest, opts ...grpc.CallOption) (*QueryGetBoardResponse, error) {
	out := new(QueryGetBoardResponse)
	err := c.cc.Invoke(ctx, "/iplace.board.v1.Query/GetBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPixelInfo(ctx context.Context, in *QueryGetPixelInfoRequest, opts ...grpc.CallOption) (*QueryGetPixelInfoResponse, error) {
	out := new(QueryGetPixelInfoResponse)
	err := c.cc.Invoke(ctx, "/iplace.board.v1.Query/GetPixelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPixels(ctx context.Context, in *QueryGetPixelsRequest, opts ...grpc.CallOption) (*QueryGetPixelsResponse, error) {
	out := new(QueryGetPixelsResponse)
	err := c.cc.Invoke(ctx, "/iplace.board.v1.Query/GetPixels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	GetAllBoards(context.Context, *QueryGetAllBoardsRequest) (*QueryGetAllBoardsResponse, error)
	GetBoard(context.Context, *QueryGetBoardRequest) (*QueryGetBoardResponse, error)
	//	rpc GetAllSlices(QueryGetAllSlicesRequest) returns (QueryGetAllSlicesResponse) {
	//	  option (google.api.http).get = "/iplace/board/{board_id}/slice";
	//	}
	//
	//	rpc GetSlice(QueryGetSliceRequest) returns (QueryGetSliceResponse) {
	//	  option (google.api.http).get = "/iplace/board/{board_id}/slice/{slice_id}";
	//	}
	GetPixelInfo(context.Context, *QueryGetPixelInfoRequest) (*QueryGetPixelInfoResponse, error)
	GetPixels(context.Context, *QueryGetPixelsRequest) (*QueryGetPixelsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetAllBoards(ctx context.Context, req *QueryGetAllBoardsRequest) (*QueryGetAllBoardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBoards not implemented")
}
func (*UnimplementedQueryServer) GetBoard(ctx context.Context, req *QueryGetBoardRequest) (*QueryGetBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoard not implemented")
}
func (*UnimplementedQueryServer) GetPixelInfo(ctx context.Context, req *QueryGetPixelInfoRequest) (*QueryGetPixelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPixelInfo not implemented")
}
func (*UnimplementedQueryServer) GetPixels(ctx context.Context, req *QueryGetPixelsRequest) (*QueryGetPixelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPixels not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetAllBoards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllBoardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllBoards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iplace.board.v1.Query/GetAllBoards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllBoards(ctx, req.(*QueryGetAllBoardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iplace.board.v1.Query/GetBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBoard(ctx, req.(*QueryGetBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPixelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPixelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPixelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iplace.board.v1.Query/GetPixelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPixelInfo(ctx, req.(*QueryGetPixelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPixels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPixelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPixels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iplace.board.v1.Query/GetPixels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPixels(ctx, req.(*QueryGetPixelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iplace.board.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllBoards",
			Handler:    _Query_GetAllBoards_Handler,
		},
		{
			MethodName: "GetBoard",
			Handler:    _Query_GetBoard_Handler,
		},
		{
			MethodName: "GetPixelInfo",
			Handler:    _Query_GetPixelInfo_Handler,
		},
		{
			MethodName: "GetPixels",
			Handler:    _Query_GetPixels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iplace/board/v1/query.proto",
}

func (m *QueryGetAllBoardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllBoardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllBoardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllBoardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllBoardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllBoardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Boards) > 0 {
		for iNdEx := len(m.Boards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Boards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBoardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBoardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBoardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBoardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBoardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBoardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Board != nil {
		{
			size, err := m.Board.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPixelInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPixelInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPixelInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PixelIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PixelIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.BoardId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BoardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPixelInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPixelInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPixelInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pixel != nil {
		{
			size, err := m.Pixel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPixelsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPixelsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPixelsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.End != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x20
	}
	if m.Start != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x18
	}
	if m.BoardId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BoardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPixelsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPixelsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPixelsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pixels) > 0 {
		i -= len(m.Pixels)
		copy(dAtA[i:], m.Pixels)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pixels)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetAllBoardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllBoardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Boards) > 0 {
		for _, e := range m.Boards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBoardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetBoardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Board != nil {
		l = m.Board.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPixelInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoardId != 0 {
		n += 1 + sovQuery(uint64(m.BoardId))
	}
	if m.PixelIndex != 0 {
		n += 1 + sovQuery(uint64(m.PixelIndex))
	}
	return n
}

func (m *QueryGetPixelInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pixel != nil {
		l = m.Pixel.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPixelsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoardId != 0 {
		n += 1 + sovQuery(uint64(m.BoardId))
	}
	if m.Start != 0 {
		n += 1 + sovQuery(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovQuery(uint64(m.End))
	}
	return n
}

func (m *QueryGetPixelsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pixels)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetAllBoardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllBoardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllBoardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllBoardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllBoardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllBoardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Boards = append(m.Boards, Board{})
			if err := m.Boards[len(m.Boards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBoardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBoardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBoardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBoardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBoardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBoardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Board", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Board == nil {
				m.Board = &Board{}
			}
			if err := m.Board.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPixelInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPixelInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPixelInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoardId", wireType)
			}
			m.BoardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PixelIndex", wireType)
			}
			m.PixelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PixelIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPixelInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPixelInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPixelInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pixel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pixel == nil {
				m.Pixel = &PixelInfo{}
			}
			if err := m.Pixel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPixelsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPixelsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPixelsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoardId", wireType)
			}
			m.BoardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPixelsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPixelsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPixelsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pixels", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pixels = append(m.Pixels[:0], dAtA[iNdEx:postIndex]...)
			if m.Pixels == nil {
				m.Pixels = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
